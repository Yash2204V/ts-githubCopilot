# How to Install GitHub Copilot?
- What is the extension needed to use GitHub Copilot in Vs Code?
    - GitHub Copilot
    - GitHub Copilot Chat
- How you can use it?
    - First, it will auto-complete your code.
    - Secondly, you can ask your doubts.
        - Chat - Text
        - Chat - Voice (extended)

# How to use GitHub Copilot with TypeScript in Vs Code?
- I come up with some example and you don't have to worry about whether you know typescript or not.
- I will give you a simple, basic example with some difference regarding typescript & javascript.
- Important: You will know how to tackle doubt, error!!

- Questions (ONLY 3):
  - title: Type-Safe Parameters and Return Type
    description: |
      Write a function called `addNumbers` that takes two parameters, `a` and `b`, and returns their sum.
      Use TypeScript to enforce that `a` and `b` must be numbers, and the function returns a number.
    javascript_limitation: |
      In JavaScript, there’s no way to enforce parameter types. If `addNumbers(2, "3")` is called, it will concatenate `"3"` as a string instead of adding the numbers, potentially leading to unexpected behavior.
    typescript_advantage: |
      TypeScript allows you to declare parameter and return types (`number` in this case). This prevents unintended values and catches mistakes at compile time.
    typescript_example: |
      function addNumbers(a: number, b: number): number {
          return a + b;
      }

  - title: Enforcing Object Structure with Interfaces
    description: |
      Create an object called `person` with properties `name` (string) and `age` (number).
      Use TypeScript to define an interface `Person` to specify the structure and types of this object.
    javascript_limitation: |
      In JavaScript, there’s no guarantee that an object has the required properties. A typo or missing property won’t throw an error until runtime, which can lead to unexpected issues.
    typescript_advantage: |
      TypeScript interfaces define the expected structure of an object. If the `person` object is missing a property or has incorrect types, TypeScript will throw an error, improving code reliability.
    typescript_example: |
      interface Person {
          name: string;
          age: number;
      }

      const person: Person = { name: "Alice", age: 25 }; // Type-safe


- title: Enforcing Array Types
  description: |
    Create an array called `scores` that should only contain numbers. Use TypeScript to ensure all elements of `scores` are numbers.
  javascript_limitation: |
    In JavaScript, you can have mixed types in an array, so accidentally adding a string to a list of numbers won’t cause an error until you try to use it as a number.
  typescript_advantage: |
    TypeScript can enforce that an array only contains specific types (like `number[]` for a list of numbers). This prevents accidentally mixing types, making the code safer and more predictable.
  typescript_example: |
    const scores: number[] = [85, 90, 78]; // Type-safe, only numbers allowed

    scores.push("95"); // Error: Argument of type 'string' is not assignable to parameter of type 'number'.
